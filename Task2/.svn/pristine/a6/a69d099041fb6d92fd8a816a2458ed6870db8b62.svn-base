package ua.nure.zharkov.Task2;

public class ListImpl implements List {

	protected Object[] innerList;

	protected int sizeList;

	private static final int DEFSIZE = 10;

	public ListImpl() {
		innerList = new Object[DEFSIZE];
		sizeList = 0;
	}

	@Override
	public int size() {
		return sizeList;
	}

	@Override
	public void add(Object el) {
		checkSize(sizeList + 1);
		innerList[sizeList++] = el;
	}

	private void checkSize(int size) {
		if (size - innerList.length > 0) {
			int oldsize = innerList.length;
			int newsize = oldsize + (oldsize >> 1);
			if (newsize - size < 0) {
				newsize = size;
			}
			innerList = java.util.Arrays.copyOf(innerList, newsize);
		}
	}

	@Override
	public Object get(int index) {
		if (index < 0 || index >= sizeList) {
			throw new java.lang.IndexOutOfBoundsException();
		}
		return innerList[index];
	}

	@Override
	public void addAll(List list) {
		checkSize(sizeList + list.size());
		for (int i = sizeList; i < sizeList + list.size(); ++i) {
			innerList[i] = list.get(i - sizeList);
		}
		sizeList += list.size();
	}

	@Override
	public void clear() {
		for (int i = 0; i < sizeList; i++) {
			innerList[i] = null;
		}
		sizeList = 0;
	}

	@Override
	public boolean contains(Object el) {
		for (int i = 0; i < sizeList; ++i) {
			if (innerList[i].equals(el)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public int indexOf(Object el) {
		for (int i = 0; i < sizeList; ++i) {
			if (innerList[i].equals(el)) {
				return i;
			}
		}
		return -1;
	}

	@Override
	public Object remove(int index) {
		if (index < 0 || index >= sizeList) {
			throw new java.lang.IndexOutOfBoundsException();
		}
		return rm(index);
	}

	private Object rm(int index) {
		Object elem = innerList[index];
		int delIndex = sizeList - index - 1;
        if (delIndex > 0) {
            System.arraycopy(innerList, index + 1, innerList, index,
            		delIndex);
        }
        innerList[--sizeList] = null;
        return elem;
	}

	@Override
	public boolean remove(Object el) {
		return rm(el);
	}

	private boolean rm(Object el) {
		int pos = indexOf(el);
		if (pos == -1) {
			return false;
		}
		remove(pos);
		return true;
	}

	@Override
	public Iterator iterator() {
		Iterator iter = new Iterator() {
			private int index = 0;
			public boolean hasNext() {
				return (index < sizeList && innerList[index] != null);
			}
			public Object next() {
				if (!hasNext()) {
					throw new java.util.NoSuchElementException();
				}
				return innerList[index++];
			}
			public void remove() {
				if (index <= 0) {
					throw new IllegalStateException();
				}
				rm(--index);
			}
		};
		return iter;
	}

	@Override
	public Object[] toArray() {
		return java.util.Arrays.copyOf(innerList, sizeList);
	}

	@Override
	public String toString() {
		StringBuilder str = new StringBuilder("[");
		for (int i = 0; i < sizeList; ++i) {
			str.append(innerList[i].toString());
			if (i < (sizeList - 1)) {
				str.append(", ");
			}
		}
		str.append("]");
		return str.toString();
	}

	public static void main(String[] args) {
		String frep = "~~~ Result: [D, E, F]";
		String srep = "~~~ list.addAll(list2)";
		String trep = "~~~ it.next()";
		String forep = "~~~ it.remove()";
		System.out.println("~~~ list A B C");
	    System.out.println("~~~ Result: [A, B, C]");
	    List list = new ListImpl();
	    list.add("A");
	    list.add("B");
	    list.add("C");
	    System.out.println(list); 
	    System.out.println("~~~ list2: D E F");
	    System.out.println(frep);
	    List list2 = new ListImpl();
	    list2.add("D");
	    list2.add("E");
	    list2.add("F");
	    System.out.println(list2); 
	    System.out.println(srep);
	    System.out.println("~~~ Result: [A, B, C, D, E, F]");
	    list.addAll(list2);
	    System.out.println(list);
	    System.out.println("~~~ list.add(C)");
	    System.out.println("~~~ Result: [A, B, C, D, E, F, C]");
	    list.add("C");
	    System.out.println(list);
	    System.out.println("~~~ list.clear()");
	    System.out.println("~~~ Result: []");
	    list.clear();
	    System.out.println(list);   
	    System.out.println(srep);
	    System.out.println(frep);
	    list.addAll(list2);
	    System.out.println(list);       
	    System.out.println("~~~ list.contains(E)");
	    System.out.println("~~~ Result: true");
	    System.out.println(list.contains("E"));    
	    System.out.println("~~~ list.contains(Ñ)");
	    System.out.println("~~~ Result: false");
	    System.out.println(list.contains("C"));         
	    System.out.println("~~~ list.indexOf(D)");
	    System.out.println("~~~ Result: 0");
	    System.out.println(list.indexOf("D"));
	    System.out.println("~~~ list.get(2)");
	    System.out.println("~~~ Result: F");
	    System.out.println(list.get(2));  
	    System.out.println("~~~ list.indexOf(F)");
	    System.out.println("~~~ Result: 2");
	    System.out.println(list.indexOf("F"));          
	    System.out.println("~~~ list.size()");
	    System.out.println("~~~ Result: 3");
	    System.out.println(list.size()); 
	    System.out.println("~~~ list");
	    System.out.println(frep);
	    System.out.println(list);  
	    System.out.println("~~~ list.remove(1)");
	    System.out.println("~~~ Result: [D, F]");
	    list.remove(1);
	    System.out.println(list);   
	    System.out.println("~~~ list.remove(F)");
	    System.out.println("~~~ Result: [D]");
	    list.remove("F");     
	    System.out.println(list);	     
	    System.out.println("~~~ list.size()");
	    System.out.println("~~~ Result: 1");
	    System.out.println(list.size());	 
	    System.out.println(srep);
	    System.out.println("~~~ Result: [D, D, E, F]");
	    list.addAll(list2);
	    System.out.println(list);	 
	    System.out.println("~~~ foreach list");
	    System.out.println("~~~ Result: D D E F");
	    for (Object el : list) {
	        System.out.print(el + " ");
	    }
	    System.out.println();	     
	    System.out.println("~~~ Iterator it = list.iterator()");      
	    Iterator it = list.iterator();	     
	    System.out.println(trep);
	    System.out.println("~~~ Result: D");
	    System.out.println(it.next());	     
	    System.out.println(trep);
	    System.out.println("~~~ Result: D");      
	    System.out.println(it.next());	     
	    System.out.println(forep);
	    System.out.println(frep);
	    it.remove();        
	    System.out.println(list);	     
	    System.out.println(trep);
	    System.out.println("~~~ Result: E");
	    System.out.println(it.next());	     
	    System.out.println(forep);
	    System.out.println("~~~ Result: [D, F]");
	    it.remove();
	    System.out.println(list); 
	    System.out.println(trep);
	    System.out.println("~~~ Result: F");
	    System.out.println(it.next());	     
	    System.out.println(forep);
	    System.out.println("~~~ Result: [D]");
	    it.remove();
	    System.out.println(list);	     
	    System.out.println("~~~ list.remove(D)");
	    System.out.println("~~~ Result: []");
	    list.remove("D");
	    System.out.println(list);	     
	    System.out.println(srep);
	    System.out.println(frep);
	    list.addAll(list2);
	    System.out.println(list);       	 
	    System.out.println("~~~ foreach list");
	    System.out.println("~~~ Result: D E F ");
	    for (Object el : list) {
	        System.out.print(el + " ");
	    }
	    System.out.println();
	}

}
