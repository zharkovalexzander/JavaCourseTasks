package ua.nure.zharkov.Task2;

import java.util.NoSuchElementException;
import java.lang.StringBuilder;

public class ListImpl implements List {
	
	protected Object[] inner_list;
	protected int size_list;
	
	public ListImpl() { 
		inner_list = new Object[0];
		size_list = 0;
	}
	
	@Override
	public int size() {
		return size_list;
	}
	
	@Override
	public void add(Object el) {
		Object[] temp = new Object[size_list];		
		for(int i = 0; i < size_list; ++i) {
			temp[i] = inner_list[i];
		}	
		inner_list = new Object[size_list + 1];		
		for(int i = 0; i < size_list; ++i) {
			inner_list[i] = temp[i];
		}		
		inner_list[size_list] = el;
		++size_list;
	}
	
	@Override
	public Object get(int index) {
		return inner_list[index];
	}
	
	@Override
	public void addAll(List list) {
		int size = size_list + list.size();
		Object[] temp = new Object[size];		
		for(int i = 0; i < size; ++i) {
			if(i < size_list) {
				temp[i] = inner_list[i];
			} else {
				temp[i] = list.get(i - size_list);
			}
		}	
		inner_list = new Object[size];		
		for(int i = 0; i < size; ++i) {
			inner_list[i] = temp[i];
		}		
		size_list = size;
	}
	
	@Override
	public void clear() {
		inner_list = new Object[0];
		size_list = 0;
	}
	
	@Override
	public boolean contains(Object el) {
		for(int i = 0; i < size_list; ++i) {
			if(inner_list[i].equals(el)) {
				return true;
			}
		}
		return false;
	}
	
	@Override
	public int indexOf(Object el) {
		for(int i = 0; i < size_list; ++i) {
			if(inner_list[i].equals(el)) {
				return i;
			}
		}
		return -1;
	}
	
	@Override
	public Object remove(int index) {
		return rm(index);
	}
	
	private Object rm(int index) {
		Object elem = inner_list[index];
		Object[] temp = new Object[size_list - 1];
		for(int i = 0; i < size_list; ++i) {
			if(i > index) {
				temp[i - 1] = inner_list[i];
			} else {
				if(i < index) {
					temp[i] = inner_list[i];
				}
			}
		}
		
		--size_list;
		inner_list = new Object[size_list];
		for(int i = 0; i < size_list; ++i) {
			inner_list[i] = temp[i];
		}
		return elem;
	}
	
	@Override
	public boolean remove(Object el) {
		return rm(el);
	}
	
	private boolean rm(Object el) {
		int pos = indexOf(el);
		if(pos == -1) {
			return false;
		}
		remove(pos);
		return true;
	}
	
	@Override
	public Iterator iterator() {
		Iterator iter = new Iterator() {
			private int index = 0;

            public boolean hasNext() {
                return ( index < size_list && inner_list[index] != null);
            }

            public Object next() {
            	if(hasNext()) {
            		return inner_list[index++];
            	} else {
                    throw new NoSuchElementException();
                }
            }

            public void remove() {
            	if(index <= 0) {
                    throw new IllegalStateException();
                } else {
                	rm(--index);
                }
            }           
		};
		return iter;
	}
	
	@Override
	public String toString() {
		StringBuilder str = new StringBuilder("[");
		for(int i = 0; i < size_list; ++i) {
			str.append(inner_list[i].toString());
			if(i < (size_list - 1)) {
				str.append(", ");
			}
		}
		str.append("]");
		return str.toString();
	}
	
	public static void main(String[] args) {
		System.out.println("~~~ list A B C");
	    System.out.println("~~~ Result: [A, B, C]");
	    List list = new ListImpl();
	    list.add("A");
	    list.add("B");
	    list.add("C");
	    System.out.println(list);
	    
	 
	    System.out.println("~~~ list2: D E F");
	    System.out.println("~~~ Result: [D, E, F]");
	    List list2 = new ListImpl();
	    list2.add("D");
	    list2.add("E");
	    list2.add("F");
	    System.out.println(list2);
	 
	    System.out.println("~~~ list.addAll(list2)");
	    System.out.println("~~~ Result: [A, B, C, D, E, F]");
	    list.addAll(list2);
	    System.out.println(list);
	 
	    System.out.println("~~~ list.add(C)");
	    System.out.println("~~~ Result: [A, B, C, D, E, F, C]");
	    list.add("C");
	    System.out.println(list);
	 
	    System.out.println("~~~ list.clear()");
	    System.out.println("~~~ Result: []");
	    list.clear();
	    System.out.println(list);
	     
	    System.out.println("~~~ list.addAll(list2)");
	    System.out.println("~~~ Result: [D, E, F]");
	    list.addAll(list2);
	    System.out.println(list);
	         
	    System.out.println("~~~ list.contains(E)");
	    System.out.println("~~~ Result: true");
	    System.out.println(list.contains("E"));
	     
	    System.out.println("~~~ list.contains(Ñ)");
	    System.out.println("~~~ Result: false");
	    System.out.println(list.contains("C"));       
	     
	    System.out.println("~~~ list.indexOf(D)");
	    System.out.println("~~~ Result: 0");
	    System.out.println(list.indexOf("D"));
	     
	    System.out.println("~~~ list.get(2)");
	    System.out.println("~~~ Result: F");
	    System.out.println(list.get(2));
	     
	    System.out.println("~~~ list.indexOf(F)");
	    System.out.println("~~~ Result: 2");
	    System.out.println(list.indexOf("F"));        
	     
	    System.out.println("~~~ list.size()");
	    System.out.println("~~~ Result: 3");
	    System.out.println(list.size());
	     
	    System.out.println("~~~ list");
	    System.out.println("~~~ Result: [D, E, F]");
	    System.out.println(list);
	     
	    System.out.println("~~~ list.remove(1)");
	    System.out.println("~~~ Result: [D, F]");
	    list.remove(1);
	    System.out.println(list);
	     
	    System.out.println("~~~ list.remove(F)");
	    System.out.println("~~~ Result: [D]");
	    list.remove("F");     
	    System.out.println(list);
	     
	    System.out.println("~~~ list.size()");
	    System.out.println("~~~ Result: 1");
	    System.out.println(list.size());
	 
	    System.out.println("~~~ list.addAll(list2)");
	    System.out.println("~~~ Result: [D, D, E, F]");
	    list.addAll(list2);
	    System.out.println(list);
	 
	    System.out.println("~~~ foreach list");
	    System.out.println("~~~ Result: D D E F");
	    for (Object el : list) {
	        System.out.print(el + " ");
	    }
	    System.out.println();
	     
	    System.out.println("~~~ Iterator it = list.iterator()");      
	    Iterator it = list.iterator();
	     
	    System.out.println("~~~ it.next()");
	    System.out.println("~~~ Result: D");
	    System.out.println(it.next());
	     
	    System.out.println("~~~ it.next()");
	    System.out.println("~~~ Result: D");      
	    System.out.println(it.next());
	     
	    System.out.println("~~~ it.remove()");
	    System.out.println("~~~ Result: [D, E, F]");
	    it.remove();        
	    System.out.println(list);
	     
	    System.out.println("~~~ it.next()");
	    System.out.println("~~~ Result: E");
	    System.out.println(it.next());
	     
	    System.out.println("~~~ it.remove()");
	    System.out.println("~~~ Result: [D, F]");
	    it.remove();
	    System.out.println(list);
	 
	    System.out.println("~~~ it.next()");
	    System.out.println("~~~ Result: F");
	    System.out.println(it.next());
	     
	    System.out.println("~~~ it.remove()");
	    System.out.println("~~~ Result: [D]");
	    it.remove();
	    System.out.println(list);
	     
	    System.out.println("~~~ list.remove(D)");
	    System.out.println("~~~ Result: []");
	    list.remove("D");
	    System.out.println(list);
	     
	    System.out.println("~~~ list.addAll(list2)");
	    System.out.println("~~~ Result: [D, E, F]");
	    list.addAll(list2);
	    System.out.println(list);       
	 
	    System.out.println("~~~ foreach list");
	    System.out.println("~~~ Result: D E F ");
	    for (Object el : list) {
	        System.out.print(el + " ");
	    }
	    System.out.println();
	}
	
}
